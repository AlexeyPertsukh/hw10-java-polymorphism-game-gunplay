package hw10_2_game_gunplay;

import java.util.Scanner;

public class Game {

    private static final String VERSION = "ver.1.3";
    private static final String COLOR_FOCUS = Player.COLOR_FOCUS;

    private Gun[] guns;
    private Player[] players;
    private Player   player;
    private final Scanner sc;
    private int numPlayer;
    private boolean exit;


    public Game() {
        guns = new Gun[0];
        sc = new Scanner(System.in);

        addGun("–ü–∏—Å—Ç–æ–ª–µ—Ç", 10, 30, 20, 80);
        addGun("–û–±—Ä–µ–∑", 40, 60, 10, 50);
        addGun("–¢—Ä–æ—Ç–∏–ª–æ–≤–∞—è —à–∞—à–∫–∞", 60,  85, 4, 20 );

    }

    //========== –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ ==================
    public void go() {
        String cmd;
        int mode = 0;

        do {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã (1 - —Å —á–µ–ª–æ–≤–µ–∫–æ–º, 2 - —Å –±–æ—Ç–æ–º): ");
            String str = sc.next();
            if(Util.isInteger(str)) {
                mode = Integer.parseInt(str);
            }

        } while(mode < 1 || mode > 2);

        players = new Player[2];
        players[0] = new Player("–ò–≥—Ä–æ–∫1", Player.HP_MAX, guns, Player.ASCII_PICTURE_LEFT);
        if(mode == 1) {
            players[1] = new Player("–ò–≥—Ä–æ–∫2", Player.HP_MAX + 20, guns, Player.ASCII_PICTURE_RIGHT);    //–≤—Ç–æ—Ä–æ–º—É- –±–æ–ª—å—à–µ –ø–∞—Ç—Ä–æ–Ω–æ–≤
        }
        else {
            players[1] = new Bot("–ò–≥—Ä–æ–∫2", Player.HP_MAX + 20, guns, Player.ASCII_PICTURE_RIGHT);
        }

        firstPlayer();  //—Ñ–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞

        Color.printlnColorRed(VERSION);
        printPage();

        do {
            Color.printColorYellow(player.getName() + ", –≤–∞—à —Ö–æ–¥. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:  ");
            cmd = player.nextCmd(sc);
            processCmd(cmd);

            if(players[0].isDead()) {
                Color.printlnColorRed(players[0].getName() + " –±—ã–ª —Ç—Ä–∞–≥–∏—á–µ—Å–∫–∏ –∑–∞—Å—Ç—Ä–µ–ª–µ–Ω üíÄüíÄüíÄüíÄüíÄ");
                Color.printlnColorGreen("–ü–æ–±–µ–¥–∏–ª " + players[1].getName() + "!");
                exit = true;
            }
            else if(players[1].isDead()) {
                Color.printlnColorRed(players[1].getName() + " –±—ã–ª —Ç—Ä–∞–≥–∏—á–µ—Å–∫–∏ –∑–∞—Å—Ç—Ä–µ–ª–µ–Ω üíÄüíÄüíÄüíÄüíÄ");
                Color.printlnColorGreen("–ü–æ–±–µ–¥–∏–ª " + players[0].getName() + "!");
                exit = true;
            }


        }while(!exit);
        //–∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
        System.out.println("I'll be back");
        System.out.println("JAVA A01 \"–®–ê–ì\", –ó–∞–ø–æ—Ä–æ–∂—å–µ 2021");
    }
    //============================================

    private void addGun(String name, int damageMin, int damageMax, int cartridge, int percentageHit) {
        Gun[] tmp = new Gun[guns.length + 1];
        System.arraycopy(guns, 0, tmp, 0, guns.length);
        tmp[tmp.length - 1] = new Gun(name, damageMin, damageMax, cartridge, percentageHit);
        guns = tmp;
    }

    private void printHeader() {
        Color.printlnColorRed("-------------------------------------------------------------------------------------------");
        Color.printlnColorRed("           üíÄüíÄüíÄüíÄüíÄ   –ö–†–û–í–ê–í–ê–Ø –ü–ï–†–ï–°–¢–†–ï–õ–ö–ê   üíÄüíÄüíÄüíÄüíÄ        ");
        Color.printlnColorRed("-------------------------------------------------------------------------------------------");
    }

    private void printFooter() {
        Color.printlnColorBlue(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .");
        String str = String.format("? —Å–ø—Ä–∞–≤–∫–∞     |  + —Å–¥–µ–ª–∞—Ç—å –≤—ã—Å—Ç—Ä–µ–ª       |  1-%d —Å–º–µ–Ω–∏—Ç—å –æ—Ä—É–∂–∏–µ       |   0 –≤—ã—Ö–æ–¥   ", player.getNumGuns());
        Color.printlnColorBlue(str);
        Color.printlnColorBlue(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .");
        player.printGuns();
        System.out.println(". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .");
    }


    private void printPage() {
        printHeader();

        String str1;
        String str2;
        String color1;
        String color2;

        color1 = getColorPlayer(0);
        color2 = getColorPlayer(1);
        Color.printColor(String.format("%-12s   %-25s", "", players[0].getName()), color1);
        Color.printColor(String.format("  %-25s \n",  players[1].getName()), color2 );

        //—Ä–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞–µ–º —á–µ–ª–æ–≤–µ—á–∫–æ–≤
        int i = 0;
        do {
            str1 = players[0].getStrPictLine(i);
            str2 = players[1].getStrPictLine(i);

            Color.printColor(String.format("               %-15s", str1), color1);
            Color.printColor(String.format("            %-15s \n", str2), color2);

            i++;
        } while(str1.compareToIgnoreCase("") != 0);

        //–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∏–≥—Ä–æ–∫–∞–º
        Color.printColor(String.format("              %-15s", players[0].getStrHpLine()), color1);
        Color.printColor(String.format("              %-15s     \n", players[1].getStrHpLine()), color2);

        System.out.printf("–∑–¥–æ—Ä–æ–≤—å–µ:     %-15d              %-15d     \n", players[0].getHitPoint(), players[1].getHitPoint());
        System.out.printf("–≤—ã—Å—Ç—Ä–µ–ª–∏–ª:    %-15d              %-15d     \n", players[0].getCntShot(), players[1].getCntShot());
        System.out.printf("–ø—Ä–æ–º–∞–∑–∞–ª:     %-15d              %-15d     \n", players[0].getCntMiss(), players[1].getCntMiss());
        System.out.printf("–æ—Ä—É–∂–∏–µ:       %-15s              %-15s     \n", players[0].nameGun(), players[1].nameGun());
        System.out.printf("              %-22s       %-22s               \n", players[0].shortGunInfo(), players[1].shortGunInfo());

        printFooter();
    }

    private void printHelp() {
        Color.setTextColor(Color.ANSI_BLUE);
        System.out.println("-----");
        System.out.println("–ë–∞–Ω–¥–∏—Ç—Å–∫–∞—è –ø–µ—Ä–µ—Å—Ç—Ä–µ–ª–∫–∞ –≤ –∑–ª–æ–≤–µ—â–∏—Ö –ø–æ–¥–≤–æ—Ä–æ—Ç–Ω—è—Ö –ó–∞–ø–æ—Ä–æ–∂—å—è");
        System.out.println("https://github.com/AlexeyPertsukh/hw10-java-polymorphism-game-gunplay");
        System.out.println("-----");
        Color.resetTextColor();
    }

    private String getColorPlayer(int num) {
        if(num == numPlayer && players[numPlayer].isDead()) {
            return Color.ANSI_RED;
        }
        return (num ==  numPlayer) ? COLOR_FOCUS : Color.ANSI_RESET;
    }

    //–∫–æ–º–∞–Ω–¥—ã
    private void processCmd(String cmd) {
        //—Ü–∏—Ñ—Ä—ã
        if(Util.isInteger(cmd)) {
            int num = Integer.parseInt(cmd);
            //–≤—ã—Ö–æ–¥
            if(num == 0) {
                exit = true;
                return;
            }
            //—Å–º–µ–Ω–∏—Ç—å –ø—É—à–∫—É
            if(num > 0 && num < player.getNumGuns() + 1) {
                if(player.changeGun(num)) {
                    printPage();
                }
                else {
                    System.out.println("–ü–æ–º–µ–Ω—è—Ç—å –ø—É—à–∫—É –Ω–µ —É–¥–∞–ª–æ—Å—å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.");
                }
                return;
            }
        }

        if(cmd.compareToIgnoreCase("?") == 0) {
            printHelp();
            return;
        }


        //–≤—ã—Å—Ç—Ä–µ–ª
        if(cmd.compareToIgnoreCase("+") == 0) {

            int damage = player.shot();
            if (damage != Gun.NUM_NO_CARTRIDGES) { //–¥–µ–ª–∞–µ–º –≤—ã—Å—Ç—Ä–µ–ª
                nextPlayer();
                player.inputDamage(damage);
                Util.sleep(3000);
                printPage();
            }
            return;
        }

        //—á–∏—Ç - –∑–∞–≤–∞–ª–∏—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–∞–ø–æ–≤–∞–ª
        if(cmd.compareToIgnoreCase("#") == 0) {
            nextPlayer();
            player.kill();
            System.out.println(player.getName() + " —Å—Ä–∞–∂—ë–Ω –Ω–∞–ø–æ–≤–∞–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –æ—Ä—É–∂–∏–µ–º");
            Util.sleep(2000);
            printPage();
            return;
        }
        System.out.println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
    }

    //–º–µ–Ω—è–µ–º –∏–≥—Ä–æ–∫–∞
    private void nextPlayer() {
        numPlayer++;
        if(numPlayer > 1) {
            numPlayer = 0;
        }
        player = players[numPlayer];
    }

    //—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    private void firstPlayer() {
        numPlayer = 0;
        player = players[numPlayer];
    }

}
